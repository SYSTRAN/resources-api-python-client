#!/usr/bin/env python
# coding: utf-8

"""
Copyright 2015 SYSTRAN Software, Inc. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


class EntriesListMatchFilter(object):
    """
    NOTE: This class is auto generated by the systran code generator program.
    Do not edit the class manually.
    """

    def __init__(self):
        """
        Systran model

        :param dict systran_types: The key is attribute name and the value is attribute type.
        :param dict attribute_map: The key is attribute name and the value is json key in definition.
        """
        self.systran_types = {
            'in_source': 'list[str]',
            'nin_source': 'list[str]',
            'regex_source': 'str',
            'in_target': 'list[str]',
            'nin_target': 'list[str]',
            'regex_target': 'str',
            'in_part_of_speech': 'list[str]',
            'nin_part_of_speech': 'list[str]',
            'regex_comments': 'str',
            'in_target_lang': 'list[str]',
            'nin_target_lang': 'list[str]',
            'min_priority': 'int',
            'max_priority': 'int',
            'in_priority': 'list[int]',
            'nin_priority': 'list[int]',
            'min_source_confidence': 'int',
            'max_source_confidence': 'int',
            'in_source_confidence': 'list[int]',
            'nin_source_confidence': 'list[int]',
            'min_target_confidence': 'int',
            'max_target_confidence': 'int',
            'in_target_confidence': 'list[int]',
            'nin_target_confidence': 'list[int]'
        }

        self.attribute_map = {
            'in_source': 'inSource',
            'nin_source': 'ninSource',
            'regex_source': 'regexSource',
            'in_target': 'inTarget',
            'nin_target': 'ninTarget',
            'regex_target': 'regexTarget',
            'in_part_of_speech': 'inPartOfSpeech',
            'nin_part_of_speech': 'ninPartOfSpeech',
            'regex_comments': 'regexComments',
            'in_target_lang': 'inTargetLang',
            'nin_target_lang': 'ninTargetLang',
            'min_priority': 'minPriority',
            'max_priority': 'maxPriority',
            'in_priority': 'inPriority',
            'nin_priority': 'ninPriority',
            'min_source_confidence': 'minSourceConfidence',
            'max_source_confidence': 'maxSourceConfidence',
            'in_source_confidence': 'inSourceConfidence',
            'nin_source_confidence': 'ninSourceConfidence',
            'min_target_confidence': 'minTargetConfidence',
            'max_target_confidence': 'maxTargetConfidence',
            'in_target_confidence': 'inTargetConfidence',
            'nin_target_confidence': 'ninTargetConfidence'
        }
        
        # Match all entries with source present in a subset of values
        self.in_source = None  # list[str]
        
        # Match all entries with source not present in a subset of values
        self.nin_source = None  # list[str]
        
        # Match all entries with source containing the specified value
        self.regex_source = None  # str
        
        # Match all entries with target present in a subset of values
        self.in_target = None  # list[str]
        
        # Match all entries with target not present in a subset of values
        self.nin_target = None  # list[str]
        
        # Match all entries with target containing the specified value
        self.regex_target = None  # str
        
        # Match all entries with part of speech present in a subset of values
        self.in_part_of_speech = None  # list[str]
        
        # Match all entries with part of speech not present in a subset of values
        self.nin_part_of_speech = None  # list[str]
        
        # Match all entries with comments containing the specified value
        self.regex_comments = None  # str
        
        # Match all entries with target lang present in a subset of values
        self.in_target_lang = None  # list[str]
        
        # Match all entries with target lang not present in a subset of values
        self.nin_target_lang = None  # list[str]
        
        # Match all entries with priority equal and over specified value
        self.min_priority = None  # int
        
        # Match all entries with priority under and equal specified value
        self.max_priority = None  # int
        
        # Match all entries with priority present in a subset of values
        self.in_priority = None  # list[int]
        
        # Match all entries with priority not present in a subset of values
        self.nin_priority = None  # list[int]
        
        # Match all entries with source confidence equal and over specified value
        self.min_source_confidence = None  # int
        
        # Match all entries with source confidence under and equal specified value
        self.max_source_confidence = None  # int
        
        # Match all entries with sourceConfidence present in a subset of values
        self.in_source_confidence = None  # list[int]
        
        # Match all entries with sourceConfidence not present in a subset of values
        self.nin_source_confidence = None  # list[int]
        
        # Match all entries with target confidence equal and over specified value
        self.min_target_confidence = None  # int
        
        # Match all entries with target confidence under and equal specified value
        self.max_target_confidence = None  # int
        
        # Match all entries with targetConfidence present in a subset of values
        self.in_target_confidence = None  # list[int]
        
        # Match all entries with targetConfidence not present in a subset of values
        self.nin_target_confidence = None  # list[int]
        

    def __repr__(self):
        properties = []
        for p in self.__dict__:
            if p != 'systran_types' and p != 'attribute_map':
                properties.append('{prop}={val!r}'.format(prop=p, val=self.__dict__[p]))

        return '<{name} {props}>'.format(name=__name__, props=' '.join(properties))


